<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.dao.StudentDao">

    <select id="selectStudentById" parameterType="java.lang.Integer" resultType="stu">
        select id, name, email, age from student where id = #{id}
    </select>

    <!-- 多个参数，使用@Param命名 -->
    <select id="selectMultiParam" resultType="org.example.domain.Student">
        select id, name, email, age from student where name = #{myname} or age = #{myage}
    </select>

    <!-- sql执行后返回一行一列 -->
    <select id="countStudent" resultType="_int">
        select count(*) from student
    </select>

    <!-- 返回Map
           1) 列名是map的key，列值是map的value
           2) 只能最多返回一行记录，多余一行是错误的
    -->
    <select id="selectMapById" resultType="map">
        select id, name from student where id=#{stuid}
    </select>

    <!-- 使用resultMap
        1) 先定义resultMap
        2) 在select标签，使用resultMap来引用1定义的。
        -->
    <!--定义resultMap
        id: 自定义名称，表示你定义的这个resultMap
        type: java类型的全限定名称
     -->
    <resultMap id="studentMap" type="org.example.domain.Student">
        <!--列名和java属性的关系-->
        <!--注解列，使用id标签
        column：列名
        property：java类型的属性名-->
        <id column="id" property="id" />
        <!--非主键列，使用result-->
        <result column="name" property="name" />
        <result column="email" property="email" />
        <result column="age" property="age" />
    </resultMap>
    <select id="selectAllStudent" resultMap="studentMap">
        select id, name, email, age from student
    </select>

    <!--第一种like， java代码指定like的内容-->
    <select id="selectLikeOne" resultType="org.example.domain.Student">
        select id, name, email, age from student where name like #{name}
    </select>

    <!--第二种方式： 在mapper文件中拼接like的内容-->
    <select id="selectLikeTwo" resultType="org.example.domain.Student">
        select id, name, email, age from student where name like "%" #{name} "%"
    </select>

</mapper>
