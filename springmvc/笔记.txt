SpringMVC：是基于spring的一个框架，实际上就是spring的一个模块，专门是做web开发的。
           理解是servlet的一个升级。
		   
		   web开发底层是servlet，框架是在servlet基础上面加入一些功能，让你做web开发方便。
		   
SpringMVC就是一个Spring。Spring是容器，ioc能够管理对象，使用<bean> @Component, @RePository, @Service, @Controller
   SpringMVC能够创建对象，放入到容器中(SpringMVC容器)，SpringMVC容器中放的是控制器对象。
   
   我们要做的是使用@Controller创建控制器对象，把对象放入到springmvc容器中，把创建的对象作为控制器使用
   这个控制器对象能够接受用户的请求，显示处理结果，就当做是一个servlet使用。
   
   使用@Controller注解创建的是一个普通的对象，不是Servlet。springmvc赋予了控制器对象一些额外的功能。
   
   web开发底层是servlet，springmvc中有一个对象是Servlet：DispatherServlet（中央调度器）
   DispatherServlet：负责接受用户的所有请求，用户把请求给了DispatherServlet， 之后DispatherServlet把请求转发给
                     我们的Controller对象，最后是Controller对象处理请求。
   
   
   index.jsp----------->DispatherServlet(Servlet)----->转发，分配给----------------->Controller对象(@Controller注解创建的对象)
   main.jsp                                                                          MainController
   addUser.jsp                                                                       UserController
   
   
----------------------------------------------------------------

springmvc请求的处理流程
  1) 发起some.do
  2) tomcat(web.xml-->url-pattern知道*.do的请求给DispatcherServlet)
  3) DispatcherServlet(根据springmvc.xml配置知道some.do----doSome())
  4) DispatcherServlet把some.do转发给了MyController.doSome()方法了
  5) 框架执行doSome()把得到ModelAndView进行处理，转发到show.jsp
  
上面的过程简化方式：
   some.do--->DispatcherServlet--->MyController
   
---------------------------------------------------------------------
springmvc执行过程源代码分析
1. tomcat启动，创建容器的过程
   通过load-on-start标签指定的1， 创建DispatcherServlet对象，
   DispatcherServlet它的父类是继承HttpServlet的，它是一个servlet，在被创建时，会执行init()方法。
   在init()方法中
   // 创建容器，读取配置文件
	WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
	// 把容器对象放入到ServletContext中
	getServletContext().setAttribute(key, ctx);
   
   上面创建容器作用：创建@Controller注解所在的类的对象，创建MyController对象，
   这个对象放入到springmvc的容器中，容器时map，类似map.put("myController", MyController对象)
   
2. 请求的处理过程
   1）执行servlet的service()方法。
      protected void service(HttpServletRequest request, HttpServletResponse response)
	  protected void doService(HttpServletRequest request, HttpServletResponse response)
	  protected void doDispatch(HttpServletRequest request, HttpServletResponse response)
	  
==========================================================================
发起的请求是由哪些服务器程序处理的。
http://localhost:8080/ch05_url_pattern/index.jsp  : tomcat（jsp会转为servlet）
http://localhost:8080/ch05_url_pattern/js/jquery-3.5.0.js : tomcat
http://localhost:8080/ch05_url_pattern/images/1.jpg ： tomcat
http://localhost:8080/ch05_url_pattern/html/test.html ： tomcat
http://localhost:8080/ch05_url_pattern/some.do ： DispatcherServlet（springmvc框架处理的）

tomcat本身能够处理静态资源的访问，像html， 图片，js文件都是静态资源

tomcat的web.xml文件有一个servlet 名称是default，在服务器启动时创建的。
<servlet>
        <servlet-name>default</servlet-name>
        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <param-name>listings</param-name>
            <param-value>false</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
	
	
	<servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/</url-pattern>  表示静态资源和未映射的请求都给这个default处理
    </servlet-mapping>

default这个servlet作用：
The default servlet for all web applications, that serves static
resources.  It processes all requests that are not mapped to other
servlets with servlet mappings (defined either here or in your own

1. 处理静态资源
2. 处理未映射到其他servlet的请求。

web.xml file).